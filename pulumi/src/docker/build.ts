import * as azure from "@pulumi/azure-native"
import * as docker from "@pulumi/docker"
import * as pulumi from "@pulumi/pulumi"

import { containerRegistry, containerRegistryResourceGroup } from "../.imports/common-infra"
// Used to tag resulting image with the correct app version
import { appVersion, appName } from "../.imports/config"

const registryInfo: docker.ImageRegistry =
  process.env.ARM_CLIENT_ID && process.env.ARM_CLIENT_SECRET
    ? // log in with provided service principal
      {
        server: containerRegistry.loginServer,
        username: process.env.ARM_CLIENT_ID,
        password: process.env.ARM_CLIENT_SECRET,
      }
    : // attempt to fetch credentials to ACR (requires Contributor access)
      azure.containerregistry
        .getRegistryCredentialsOutput(
          {
            resourceGroupName: containerRegistryResourceGroup.name,
            registryName: containerRegistry.name,
          }
        )
        .apply((registryCredentials) => ({
          server: containerRegistry.loginServer,
          username: registryCredentials.username,
          password: registryCredentials.password,
        }))

// the PR_NUMBER env should be set in the github actions that deploy the pulumi
// stack. E.g.,:
// env:
//   PR_NUMBER: ${{ github.event.number }}
const imageLabel = process.env.PR_NUMBER ?? appVersion

const repository = pulumi.getStack()

export const fullImageName = containerRegistry.name.apply(
  (registryName) => `${registryName}.azurecr.io/${appName}/${repository}:${imageLabel}`
)

// Build and publish the image using the auth information.
const image = new docker.Image("app-docker-image", {
  build: {
    context: "../app/",
    env: {
      "DOCKER_DEFAULT_PLATFORM": "linux/amd64"
    }
  },
  imageName: fullImageName,
  registry: registryInfo,

})

export const baseImageName = image.baseImageName
// includes a unique suffix generated by Pulumi for each build
export const fullImageUniqueName = image.imageName
